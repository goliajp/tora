name: Release Workflow

on:
  push:
    branches:
      - develop
  create:
    tags:
      - '*'

jobs:
#  build-linux:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: '21'
#
#      - name: Install dependencies
#        run: yarn install
#
#      - name: Build Linux
#        run: yarn build:linux
#
#      - name: Zip the linux-unpacked build
#        run: |
#          PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')
#          ARCH=$(uname -m)
#          VERSION=$(jq -r .version package.json)
#          DIR="linux-unpacked"
#          FILENAME="electron-tora-${PLATFORM}-${ARCH}-${VERSION}-${DIR}.zip"
#          if [ -d "./dist/$DIR" ]; then
#            zip -r $FILENAME ./dist/$DIR
#            echo "::set-output name=FILENAME1::$FILENAME"
#          else
#            echo "Error: Directory ./dist/$DIR does not exist."
#            exit 1
#          fi
#        id: zip_linux_unpacked
#        shell: /usr/bin/bash -e {0}
#
#      - name: Zip the linux-arm64-unpacked build
#        run: |
#          PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')
#          ARCH=$(uname -m)
#          VERSION=$(jq -r .version package.json)
#          DIR="linux-arm64-unpacked"
#          FILENAME="electron-tora-${PLATFORM}-${ARCH}-${VERSION}-${DIR}.zip"
#          if [ -d "./dist/$DIR" ]; then
#            zip -r $FILENAME ./dist/$DIR
#            echo "::set-output name=FILENAME2::$FILENAME"
#          else
#            echo "Error: Directory ./dist/$DIR does not exist."
#            exit 1
#          fi
#        id: zip_linux_arm64_unpacked
#        shell: /usr/bin/bash -e {0}
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-1
#
#      - name: Upload to S3
#        run: |
#          if [ -n "${{ steps.zip_linux_unpacked.outputs.FILENAME1 }}" ]; then
#            aws s3 cp ./${{ steps.zip_linux_unpacked.outputs.FILENAME1 }} s3://cdn-golia/downloads/electron-tora/${{ steps.zip_linux_unpacked.outputs.FILENAME1 }}
#          fi
#          if [ -n "${{ steps.zip_linux_arm64_unpacked.outputs.FILENAME2 }}" ]; then
#            aws s3 cp ./${{ steps.zip_linux_arm64_unpacked.outputs.FILENAME2 }} s3://cdn-golia/downloads/electron-tora/${{ steps.zip_linux_arm64_unpacked.outputs.FILENAME2 }}
#          fi
  build-mac:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'

      - name: Install dependencies
        run: yarn install

      - name: Build Mac
        run: yarn build:mac

      - name: Find the DMG files
        id: find_dmg
        run: |
          find dist -name "*.dmg" > dmg_files.txt
          cat dmg_files.txt
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Upload to S3
        run: |
          while IFS= read -r DMG_FILE; do
            aws s3 cp "$DMG_FILE" s3://cdn-golia/downloads/electron-tora/$(basename "$DMG_FILE")
          done < dmg_files.txt
        shell: bash