name: Release Workflow

on:
  push:
    branches:
      - develop
  create:
    tags:
      - '*'

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'

      - name: Install dependencies
        run: yarn install

      - name: Build Linux
        run: yarn build:linux

      - name: Find the AppImage files
        id: find_AppImage
        run: |
          find dist -name "*.AppImage" > AppImage_files.txt
          cat AppImage_files.txt
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Upload individual AppImage files as ZIP to S3
        run: |
          while IFS= read -r AppImage_FILE; do
            ZIP_FILE="${AppImage_FILE%.AppImage}.zip"
            zip -j "$ZIP_FILE" "$AppImage_FILE"
            aws s3 cp "$ZIP_FILE" s3://cdn-golia/downloads/electron-tora/$(basename "$ZIP_FILE")
          done < AppImage_files.txt
        shell: bash


      - name: Generate version.json and upload to S3
        run: |
          VERSION=$(jq -r .version package.json)
          PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')
          echo "{\"${PLATFORM}_version\": \"$VERSION\"}" > version.json
          aws s3 cp version.json s3://cdn-golia/downloads/electron-tora/${PLATFORM}_version.json
        shell: bash
  build-mac:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'

      - name: Install dependencies
        run: yarn install

      - name: Build Mac
        run: yarn build:mac

      - name: Find the DMG files
        id: find_dmg
        run: |
          find dist -name "*.dmg" > dmg_files.txt
          cat dmg_files.txt
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1

      - name: Upload DMG files to S3
        run: |
          while IFS= read -r DMG_FILE; do
            aws s3 cp "$DMG_FILE" s3://cdn-golia/downloads/electron-tora/$(basename "$DMG_FILE")
          done < dmg_files.txt
        shell: bash

      - name: Generate version.json and upload to S3
        run: |
          VERSION=$(jq -r .version package.json)
          PLATFORM=$(uname -s | tr '[:upper:]' '[:lower:]')
          echo "{\"${PLATFORM}_version\": \"$VERSION\"}" > version.json
          aws s3 cp version.json s3://cdn-golia/downloads/electron-tora/${PLATFORM}_version.json
        shell: bash


#  build-win:
#    runs-on: windows-latest
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up Node.js
#        uses: actions/setup-node@v4
#        with:
#          node-version: '21'
#
#      - name: Install dependencies
#        run: yarn install
#
#      - name: Build Windows
#        run: yarn build:win
#
#      - name: Find the MSI files
#        id: find_msi
#        run: |
#          find dist -name "*.msi" > msi_files.txt
#          cat msi_files.txt
#        shell: bash
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-1
#
#      - name: Upload to S3
#        run: |
#          while IFS= read -r MSI_FILE; do
#            aws s3 cp "$MSI_FILE" s3://cdn-golia/downloads/electron-tora/$(basename "$MSI_FILE")
#          done < msi_files.txt
#        shell: bash